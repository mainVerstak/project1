// Generated by CoffeeScript 2.7.0
(function() {
  $(function() {
    var $dropdownSelect;
    // Find all dropdown multiselect elements
    $dropdownSelect = $('.dropdown-multiselect');
    
    // Process each dropdown
    return $dropdownSelect.each(function() {
      var $dropdown, $dropdownButton, $dropdownButtonText, $dropdownMenuItems, btnText, selectName, selectValue;
      $dropdown = $(this);
      selectValue = [];
      selectName = [];
      $dropdownButton = $dropdown.find('.dropdown-multiselect-toggle');
      $dropdownButtonText = $dropdown.find('.dropdown-multiselect-toggle span');
      $dropdownMenuItems = $dropdown.find('.dropdown-multiselect-menu-item');
      
      // Store the original button text
      btnText = $dropdownButtonText.text();
      
      // Handle escape key to close the dropdown
      $dropdown.on('keydown', function(e) {
        if (e.key === 'Escape') {
          $dropdown.removeClass('open');
          return $dropdownButton.removeClass('active');
        }
      });
      
      // Toggle dropdown on button click
      $dropdownButton.on('click', function(e) {
        e.preventDefault();
        $dropdown.toggleClass('open');
        return $dropdownButton.toggleClass('active');
      });
      
      // Set tabindex for focusing
      $dropdown.attr('tabindex', '-1');
      
      // Handle clicks outside the dropdown to close it
      $(document).on('click', function(e) {
        if (!$(e.target).closest($dropdown).length && $dropdown.hasClass('open')) {
          $dropdown.removeClass('open');
          return $dropdownButton.removeClass('active');
        }
      });
      
      // Prevent dropdown from closing when clicking inside it
      $dropdown.on('click', function(e) {
        return e.stopPropagation();
      });
      
      // Handle clicks on menu items
      return $dropdownMenuItems.on('click', function(e) {
        var $input, $this, itemText;
        e.preventDefault();
        e.stopPropagation(); // Prevent event from bubbling up
        $this = $(this);
        $input = $this.find('input');
        itemText = $this.text();
        
        // Toggle active class on the clicked item
        $this.toggleClass('active');
        
        // Add/remove values based on selection state
        if ($this.hasClass('active')) {
          // Add to arrays if selected
          selectName.push(itemText);
          if ($input.length) {
            selectValue.push($input.val());
          }
        } else {
          // Remove from arrays if deselected
          selectValue = selectValue.filter(function(value) {
            return value !== $input.val();
          });
          selectName = selectName.filter(function(name) {
            return name !== itemText;
          });
        }
        
        // Set the data attribute with selected values
        $dropdown.data('value', selectValue);
        
        // Update button text based on selection count
        if (selectName.length > 1) {
          $dropdownButtonText.text(`${selectName[0]} +${selectName.length - 1}`);
          return $dropdownButtonText.addClass('bold');
        } else if (selectName.length === 0) {
          $dropdownButtonText.text(btnText);
          return $dropdownButtonText.removeClass('bold');
        } else {
          $dropdownButtonText.text(selectName[0]);
          return $dropdownButtonText.addClass('bold');
        }
      });
    });
  });

}).call(this);
